<?php

namespace Nurun\Bundle\RhBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ConseillerMandatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConseillerMandatRepository extends EntityRepository
{
   
    public function findCurrentAffectations($conseiller)
    {
      $today = new \DateTime();
      
      $qb = $this->createQueryBuilder('c');
    
      $qb->join('c.statutAffectation', 's')
        ->addSelect('s');

      $qb->where('c.conseiller = :conseiller')
       ->andWhere('s.acronyme = :statut')
       ->andWhere('c.dateDebut <= :today')
       ->andWhere('c.dateFin >= :today')
       ->andWhere('c.deletedAt is null')
       ->setParameter('conseiller', $conseiller)
       ->setParameter('today', $today->format('Y-m-d'))
       ->setParameter('statut', 'A')
            ; 

      $affectationsActives=$qb
        ->getQuery()
        ->getArrayResult()
      ;

    }

    public function findFuturesVacances($vp)
    {
        $today = new \DateTime();
        $conseillersVacanciers = array();

        if (($vp == 'VPOF') OR ($vp == 'TOUT'))
        {
            $conseillers = $this->getEntityManager()
                ->getRepository('NurunRhBundle:Conseiller')
                ->findAll();
        }
        else
        {
            $conseillers = $this->getEntityManager()
                ->getRepository('NurunRhBundle:Conseiller')
                ->findByVP($vp);
        }

        foreach ($conseillers as $conseiller)
        {

            $qb = $this->createQueryBuilder('c');

            $qb->where('c.conseiller = :conseiller')
                ->andWhere('c.identifiantMandat = :vacances')
                ->andWhere('c.dateFin >= :today')
                ->andWhere('c.deletedAt is null')
                ->setParameter('conseiller', $conseiller)
                ->setParameter('today', $today->format('Y-m-d'))
                ->setParameter('vacances', 'NSC-Vacances');
            $vacances=$qb
                ->getQuery()
                ->getResult()
            ;
            if (!empty($vacances))
            {
                $conseillerVacancier = array();
                $conseillerVacancier[] = $conseiller;
                $conseillerVacancier[] = $vacances;
                $conseillersVacanciers[] = $conseillerVacancier;
                unset($conseillerVacancier);
            }
        }

    return $conseillersVacanciers;
    }

    public function findFuturesVacancesByDates($vp, $dateDeb, $dateFin)
    {
        // $today = new \DateTime();
        $conseillersVacanciers = array();

        if (($vp == 'VPOF') OR ($vp == 'TOUT'))
        {
            $conseillers = $this->getEntityManager()
                ->getRepository('NurunRhBundle:Conseiller')
                ->findAll();
        }
        else
        {
            $conseillers = $this->getEntityManager()
                ->getRepository('NurunRhBundle:Conseiller')
                ->findByVP($vp);
        }

        foreach ($conseillers as $conseiller)
        {

            $qb = $this->createQueryBuilder('c');

            $qb->where('c.conseiller = :conseiller')
                ->andWhere('c.identifiantMandat = :vacances')
                ->andWhere('c.dateFin <= :dateFin')
                ->andWhere('c.dateDebut >= :dateDeb')
                ->andWhere('c.deletedAt is null')
                ->setParameter('conseiller', $conseiller)
                ->setParameter('dateDeb', $dateDeb->format('Y-m-d'))
                ->setParameter('dateFin', $dateFin->format('Y-m-d'))
                ->setParameter('vacances', 'NSC-Vacances');
            $vacances=$qb
                ->getQuery()
                ->getResult()
            ;
            if (!empty($vacances))
            {
                $conseillerVacancier = array();
                $conseillerVacancier[] = $conseiller;
                $conseillerVacancier[] = $vacances;
                $conseillersVacanciers[] = $conseillerVacancier;
                unset($conseillerVacancier);
            }
        }

        return $conseillersVacanciers;
    }


    public function findAffectationsActives($conseiller)
    {
        
    $today = new \DateTime();

    $qb = $this->createQueryBuilder('c');
    
    $qb->join('c.statutAffectation', 's')
      ->addSelect('s');
    
    $qb->where('c.conseiller = :conseiller')
       ->andWhere('s.acronyme = :statut')
       ->andWhere('c.dateDebut <= :today')
       ->andWhere('c.dateFin >= :today')
       ->andWhere('c.deletedAt is null')
       ->andWhere('c.identifiantMandat != :maladie')
       ->andWhere('c.identifiantMandat != :psc')
       ->andwhere('c.identifiantMandat != :intermandat')
       ->andwhere('c.identifiantMandat != :mandatinterne')
       ->setParameter('conseiller', $conseiller)
       ->setParameter('today', $today->format('Y-m-d'))
       ->setParameter('statut', 'A')
       ->setParameter('intermandat', 'NSC-Intermandat')
       ->setParameter('psc', 'NSC-PSC')
       ->setParameter('maladie', 'NSC-Maladie')
       ->setParameter('mandatinterne', 'NSC-I-Mandat (interne)')
            ;  
        
    $affectationsActives=$qb
    ->getQuery()
    ->getResult()
    ;
      
    return $affectationsActives;
    }

    public function findAffectationsActivesFromDate($conseiller,$datedeb, $datefin)
    {
    $qb = $this->createQueryBuilder('c');

    $qb->join('c.statutAffectation', 's')
      ->addSelect('s');
    
    $qb->where('c.conseiller = :conseiller')
       ->andWhere('s.acronyme = :statut')
       ->andWhere('c.dateDebut <= :datedeb')
       ->andWhere('c.dateFin >= :datefin')
       ->andWhere('c.deletedAt is null')
       ->andWhere('c.identifiantMandat != :maladie')
       ->andWhere('c.identifiantMandat != :psc')
       ->andwhere('c.identifiantMandat != :intermandat')
       ->andwhere('c.identifiantMandat != :mandatinterne')
       ->setParameter('conseiller', $conseiller)
       ->setParameter('datefin', $datefin->format('Y-m-d'))
       ->setParameter('datedeb', $datedeb->format('Y-m-d'))
       ->setParameter('statut', 'A')
       ->setParameter('psc', 'NSC-PSC')
       ->setParameter('intermandat', 'NSC-Intermandat')
       ->setParameter('maladie', 'NSC-Maladie')
       ->setParameter('mandatinterne', 'NSC-I-Mandat (interne)')    
            ;  
        
    $affectationsActives=$qb
    ->getQuery()
    ->getArrayResult()
    ;
      
    return $affectationsActives;
    }
    
    public function findVidesFromDate($conseiller, $dateDebut, $dateFin)
    {

      $day = new \DateInterval('P1D');
      $dateTravail = new \DateTime($dateDebut->format('Y-m-d'));
      $nbreVides = 0;
    
      // On parcourtt tous les jours dans le créneau calendaire
      while ($dateTravail <= $dateFin)
      {
        // On ne teste que les jours ouvrés
        if (($dateTravail->format('w') != 6) and (($dateTravail->format('w') != 0)) )
        {
          $qb = $this->createQueryBuilder('c');

          $qb->join('c.statutAffectation', 's')
            ->addSelect('s');

          // On vérifie si à la datedeb on a une affectation active
          $qb->where('c.conseiller = :conseiller')
            ->andWhere('s.acronyme = :statut')
            ->andWhere('c.dateDebut <= :datedeb')
            ->andWhere('c.dateFin >= :datedeb')
            ->andWhere('c.deletedAt is null')
            ->andWhere('c.identifiantMandat != :maladie')
            ->andWhere('c.identifiantMandat != :psc')
            ->andwhere('c.identifiantMandat != :intermandat')
            ->andwhere('c.identifiantMandat != :mandatinterne')
            ->setParameter('conseiller', $conseiller)
            ->setParameter('datedeb', $dateTravail->format('Y-m-d'))
            ->setParameter('statut', 'A')
            ->setParameter('psc', 'NSC-PSC')
            ->setParameter('intermandat', 'NSC-Intermandat')
            ->setParameter('maladie', 'NSC-Maladie')
            ->setParameter('mandatinterne', 'NSC-I-Mandat (interne)')
          ;  

          $affectationsActives = $qb->getQuery()->getArrayResult(); 
            
          if (count($affectationsActives) == 0) {
            $nbreVides = $nbreVides + 1;
          }
        }
        $dateTravail->add($day);
      }
      return $nbreVides;
    }
    
    public function findDatesDispo($conseiller,$datedebut, $datefin)
    {
      $qb = $this->createQueryBuilder('c');

      $qb->join('c.statutAffectation', 's')
        ->addSelect('s');

      // On récupère toutes les affectations se terminant dans la période
      $qb->where('c.conseiller = :conseiller')
        ->andWhere('s.acronyme = :statut')
        ->andWhere('c.dateFin < :datefin')
        ->andWhere('c.dateFin >= :datedeb')
        ->andWhere('c.deletedAt is null')
        // ->andWhere('c.identifiantMandat != :maladie')
        // ->andWhere('c.identifiantMandat != :psc')
        ->andwhere('c.identifiantMandat != :intermandat')
        ->andwhere('c.identifiantMandat != :mandatinterne')
        ->setParameter('conseiller', $conseiller)
        ->setParameter('datedeb', $datedebut->format('Y-m-d'))
        ->setParameter('datefin', $datefin->format('Y-m-d'))
        ->setParameter('statut', 'A')
        // ->setParameter('psc', 'NSC-PSC')
        ->setParameter('intermandat', 'NSC-Intermandat')
        // ->setParameter('maladie', 'NSC-Maladie')
        ->setParameter('mandatinterne', 'NSC-I-Mandat (interne)')
        ->orderBy('c.dateFin', 'ASC')
      ;  

      $affectationsFinies = $qb->getQuery()->getResult(); 

      $resume = "";
        
      foreach($affectationsFinies as $affectationFinie)
      {
        if (empty($resume)) {
          $resume = "Le " . $affectationFinie->getDateFin()->format('d/m') . " (" . $affectationFinie->getIdentifiantMandat().")";    
        }
        else {
          $resume = $resume. " et le " . $affectationFinie->getDateFin()->format('d/m') . " (" . $affectationFinie->getIdentifiantMandat().")";
        }
      }

      if (empty($resume)) {
         // $resume = "Antérieure au " . $datedebut->format('d/m'); 
      }
      return $resume;
    }

    public function findOtherAffectations($conseiller, $id)
    {
        $today = new \DateTime();

        $qb = $this->createQueryBuilder('c');

        $qb->join('c.statutAffectation', 's')
            ->addSelect('s');

        $qb->where('c.conseiller = :conseiller')
            ->andWhere('s.acronyme = :statut')
            ->andWhere('c.id != :id')
            ->andWhere('c.dateFin > :today')
            ->andWhere('c.deletedAt is null')
            ->orderBy('c.dateFin', 'ASC')
            ->setParameter('conseiller', $conseiller)
            ->setParameter('id', $id)
            ->setParameter('today', $today->format('Y-m-d'))
            ->setParameter('statut', 'A');
        $affectations = $qb
            ->getQuery()
            ->getResult();

        return $affectations;
    }

    public function findAffectationsAffected($conseiller)
    {
        $today = new \DateTime();

    $qb = $this->createQueryBuilder('c');

    $qb->join('c.statutAffectation', 's')
      ->addSelect('s');

    $qb->where('c.conseiller = :conseiller')
        ->andWhere('s.acronyme = :statut')
        ->andWhere('c.dateFin >= :today')
       ->andWhere('c.deletedAt is null')
       ->orderBy('c.dateFin', 'ASC')
       ->setParameter('conseiller', $conseiller)
        ->setParameter('today', $today->format('Y-m-d'))
        ->setParameter('statut', 'A')
            ;
        $affectations = $qb
    ->getQuery()
    ->getResult()
    ;

    return $affectations;
    }
    
//    Permet de savoir quelles sont les affectations sur lesquelles le conseillers est affecté et non proposé

    public function findPropositionsString($conseiller)
    {
        $propositions = $this->findPropositions($conseiller);
        $resume = "";

        foreach ($propositions as $proposition) {
            $colorAffectation = "";
            if (($proposition->getStatutAffectation()->getAcronyme() == "PS") OR ($proposition->getStatutAffectation()->getAcronyme() == "PS(AO)")) {
                $colorAffectation = "<span style='color:#BC0606'><b>" . $proposition->getStatutAffectation()->getAcronyme() . '-' . $proposition->getIdentifiantMandat() . "</b></span>";
            } else {
                $colorAffectation = $proposition->getStatutAffectation()->getAcronyme() . '-' . $proposition->getIdentifiantMandat();
            }
            if (empty($resume)) {
                $resume = $colorAffectation . " du " . $proposition->getDateDebut()->format('Y-m-d') .
                    " au " . $proposition->getDateFin()->format('Y-m-d');
            } else {
                $resume = $resume . ", " . $colorAffectation . " du " . $proposition->getDateDebut()->format('Y-m-d') .
                    " au " . $proposition->getDateFin()->format('Y-m-d');
            }
        }

        return $resume;
    }

    public function findPropositions($conseiller)
    {
    $qb = $this->createQueryBuilder('c');

    $qb->join('c.statutAffectation', 's')
      ->addSelect('s');

    $qb->where('c.conseiller = :conseiller')
        ->andWhere('s.acronyme in (:statut)')
       ->andWhere('c.deletedAt is null')
        ->orderBy('c.dateFin', 'ASC')
       ->setParameter('conseiller', $conseiller)
        ->setParameter('statut', array('P', 'PS', 'P(AO)', 'PS(AO)'))
            ;
        $propositions = $qb
    ->getQuery()
    ->getResult()
    ;

        return $propositions;
    }

    public function findFutureAffectationsString($conseiller, $fromDate)
    {
        $affectations = $this->findFutureAffectations($conseiller, $fromDate);
    $resume = "";

        foreach ($affectations as $affectation)
    {
        if (empty($resume))
        {
            $resume = $affectation->getStatutAffectation()->getAcronyme() . '-' . $affectation->getIdentifiantMandat() .
                " du " . $affectation->getDateDebut()->format('Y-m-d') .
                " au " . $affectation->getDateFin()->format('Y-m-d');
        }
        else
        {
            $resume = $resume . ", " . $affectation->getStatutAffectation()->getAcronyme() . '-' . $affectation->getIdentifiantMandat() .
                " du " . $affectation->getDateDebut()->format('Y-m-d') .
                " au " . $affectation->getDateFin()->format('Y-m-d');
        }
    }

    return $resume;
    }

    public function findFutureAffectations($conseiller, $fromDate)
    {

        $qb = $this->createQueryBuilder('c');

        $qb->join('c.statutAffectation', 's')
            ->addSelect('s');

        $qb->where('c.conseiller = :conseiller')
            ->andWhere('s.acronyme = :statut')
            ->andWhere('c.dateDebut > :fromDate')
            ->andWhere('c.deletedAt is null')
            ->setParameter('conseiller', $conseiller)
            ->setParameter('fromDate', $fromDate->format('Y-m-d'))
            ->setParameter('statut', 'A');
        $affectations = $qb
            ->getQuery()
            ->getResult();

        return $affectations;
    }

    public function findConseillersDisponibles($vp)
    {
        $conseillersDisponibles = array();

        if (($vp == 'VPOF') OR ($vp == 'ALL'))
        {
            $listConseillers = $this->getEntityManager()
                ->getRepository('NurunRhBundle:Conseiller')
                ->findAll();
        }
        else
        {
            $listConseillers = $this->getEntityManager()
                ->getRepository('NurunRhBundle:Conseiller')
                ->findByVP($vp);
        }
        foreach ($listConseillers as $conseiller)
        {
            $listAffectationsActives = $this->getEntityManager()
                ->getRepository('NurunRhBundle:ConseillerMandat')
                ->findAffectationsActives($conseiller);
            if (count($listAffectationsActives) == 0)
            {
                $conseillersDisponibles[] = $conseiller;
            }
        }
        return $conseillersDisponibles;

    }

    public function findConseillersDispos($vp, $decalage)
    {
    
    $today = new \DateTime(); 
 
    $conseillersDisponibles = array();

    if ($vp == 'VPOF')
        {
        $listConseillers = $this->getEntityManager()
        ->getRepository('NurunRhBundle:Conseiller')
        ->findAll();
    }
    else 
    {
    $listConseillers = $this->getEntityManager()
        ->getRepository('NurunRhBundle:Conseiller')
        ->findByVP($vp);
    }

//    On configure la date de fin de la recherche des conseillers sur le banc durant le mois en cours
    $datefin = new \DateTime($today->format('Y-m').'-01');
    $mois = new \DateInterval('P1M');
    $day = new \DateInterval('P1D');
    $moisdecalage = new \DateInterval('P'.$decalage.'M');

    $datefin->add($mois);
    $datefin->add($moisdecalage);

    $datefin->sub($day);
    $datedeb = new \DateTime($today->format('Y-m').'-01');

    $datedeb->add($moisdecalage);

    foreach ($listConseillers as $conseiller)
    {
        
//        Recherche pour chaque conseiller si il a des affectations actives couvrant toute la période en cours
         $listAffectationsActives = $this->getEntityManager()
        ->getRepository('NurunRhBundle:ConseillerMandat')
        ->findAffectationsActivesFromDate($conseiller,$datedeb, $datefin);
         
//        Recherche pour chaque conseiller si il a des vides dans la période en cours
         $listVides = $this->getEntityManager()
        ->getRepository('NurunRhBundle:ConseillerMandat')
//        ->findVidesFromDate($conseiller,new \DateTime($datedeb->format('Y-m-d')), $datefin);
        ->findVidesFromDate($conseiller,$datedeb, $datefin);
         
//         Si il a pas d'affectations sur toute la durée alors on peut le placer dans le tableau intermandat
//         if ((count($listAffectationsActives) == 0) and ($listVides > 0))
         if (count($listAffectationsActives) == 0)
         {
//             Pour chaque conseiller sur le banc, on récupère son nom ainsi que ses propos et affectations a venir
             $conseillerArray = array();
             $conseillerArray['id'] = $conseiller->getId();
             $conseillerArray['prenom'] = $conseiller->getPrenom();
             $conseillerArray['nom'] = $conseiller->getNom();
             
//             On récupère sa date de disponibilité
             $listFinAffectations = $this->getEntityManager()
            ->getRepository('NurunRhBundle:ConseillerMandat')
            ->findDatesDispo($conseiller,$datedeb, $datefin);
             $conseillerArray['finaffectations'] = $listFinAffectations;

//             On récupère ses propositions
             $resumePropositions = $this->getEntityManager()
                    ->getRepository('NurunRhBundle:ConseillerMandat')
                    ->findPropositionsString($conseiller);
             
//             On récupère ses affectations à venir
             $resumeAffectations = $this->getEntityManager()
                    ->getRepository('NurunRhBundle:ConseillerMandat')
                    ->findFutureAffectationsString($conseiller, $today);

//             On concatène les 2
             if (empty($resumePropositions))
             {
                 $resume = $resumeAffectations;
             }
             else if (empty ($resumeAffectations))
             {
                 $resume = $resumePropositions;
             }    
             else
             {
                 $resume = $resumeAffectations . ', ' . $resumePropositions;
             }
             $conseillerArray['propositions'] = $resume;
             
//             Et on place l'ensemble de la description du conseiller sur le banc dans un tableau
             $conseillersDisponibles[] = $conseillerArray;
             unset($conseillerArray);
         }
    }
    
    return $conseillersDisponibles;
    }
    
     public function listByDisponibilite($vp)
    {

    $qb = $this->createQueryBuilder('a');
    $qb ->leftjoin('a.conseiller', 'c')    
        ->leftjoin('c.vicePresidence', 'v')
        ->leftjoin('a.statutAffectation', 's')
        ->where('v.acronyme = :vp')
        ->andWhere('s.acronyme = :statut')
        ->andWhere('a.identifiantMandat != :maladie')
        ->andWhere('a.identifiantMandat != :psc')
        ->andWhere('a.identifiantMandat != :vacances')
        ->andWhere('a.identifiantMandat != :intermandat')     
        ->andWhere('a.identifiantMandat != :mandatinterne')
        ->andWhere('a.deletedAt is null')
        ->andWhere('c.deletedAt is null')             
        ->setParameter('statut', 'A')
        ->setParameter('psc', 'NSC-PSC')
        ->setParameter('intermandat', 'NSC-Intermandat')
        ->setParameter('maladie', 'NSC-Maladie')
        ->setParameter('vacances', 'NSC-Vacances')
        ->setParameter('mandatinterne', 'NSC-I-Mandat (interne)')   
        ->orderBy('a.dateFin', 'ASC')
        ->groupBy('a.conseiller')
        ->setParameter('vp', $vp)
            ;    
    
    $liste=$qb
    ->getQuery()
    ->getResult()
    ;
    
    return $liste;
    }

    public function findByVp($vp)
    {

        $qb = $this->createQueryBuilder('a');
        $qb ->leftjoin('a.conseiller', 'c')
            ->leftjoin('c.vicePresidence', 'v')
            ->where('v.acronyme = :vp')
            ->setParameter('vp', $vp)
            ->andWhere('a.deletedAt is null')
            ->andWhere('c.deletedAt is null')
        ;

        $liste=$qb
            ->getQuery()
            ->getResult()
        ;

        return $liste;
    }

    public function findActives()
    {
      $qb = $this->createQueryBuilder('a');
      $qb ->where('a.deletedAt is null');

      $liste = $qb->getQuery()->getResult();

      return $liste;
    }

  public function findAffectationsFromDate($conseiller,$dateDeb, $dateFin) {
    $qb = $this->createQueryBuilder('c');

    $qb->join('c.statutAffectation', 's')
      ->addSelect('s');
    
    $qb->where('c.conseiller = :conseiller')
      ->andWhere('s.acronyme = :statut')
      ->andWhere('c.dateFin >= :dateDeb')
      ->andWhere('c.dateDebut <= :dateFin')
      ->andWhere('c.identifiantMandat != :maladie')
      ->andWhere('c.identifiantMandat != :psc')
      ->andwhere('c.identifiantMandat != :intermandat')
      ->andwhere('c.identifiantMandat != :mandatinterne')
      ->andWhere('c.deletedAt is null')
      ->setParameter('conseiller', $conseiller)
      ->setParameter('dateDeb', $dateDeb->format('Y-m-d'))
      ->setParameter('dateFin', $dateFin->format('Y-m-d'))
      ->setParameter('statut', 'A')
      ->setParameter('psc', 'NSC-PSC')
      ->setParameter('intermandat', 'NSC-Intermandat')
      ->setParameter('maladie', 'NSC-Maladie')
      ->setParameter('mandatinterne', 'NSC-I-Mandat (interne)')    
    ;        
    $affectations = $qb->getQuery()->getResult();    
    return $affectations;
  }
}
